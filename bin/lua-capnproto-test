#!/usr/bin/env luajit

local test = require("test_capnp")
local cjson = require("cjson")
local util = require("util")

local insert = table.insert
local concat = table.concat
-- print(arg[1], arg[2])

local action = arg[1]
local test_case = arg[2]

-- print(action, test_case)

function pprint(val, T)
    print(util.to_text(val, T))
end

local type_map = {
    simpleTest              = "SimpleTestStruct",
    textListTypeTest        = "ListTest",
    uInt8DefaultValueTest   = "TestDefaults",
    constTest               = "SimpleTestStruct",
}

local proto_file = "test.capnp"
local proto


function get_input(test_case)
    if not proto then
        proto = util.read_file(proto_file)
    end
    local start, stop, _1 = string.find(proto, "const ".. test_case .. " :%w+ = ([^\n]*);")
    local lua_str = util.parse_capnp_txt(_1)
    return assert(loadstring(lua_str)())
end


local typ = assert(type_map[test_case])
if action == "decode" then
    local content = io.stdin:read("*a")
    --util.write_file("decode_" .. test_case, content)
    local r = test[typ].parse(content)
    pprint(r, test[typ])
elseif action == "encode" then
    local input = get_input(test_case)
    local r = test[typ].serialize(input)
    --util.write_file("encode_" .. test_case, r)
    io.stdout:write(r)
    if test_case ~= "simpleTest" and test_case ~= "textListTypeTest"  then
        os.exit(127)
    end
end
